!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.7	//
,e	debugger.vim	/^nnoremap ,e :python debugger_watch_input("eval")<cr>A$/;"	m
<F11>	debugger.vim	/^map <F11> :python debugger_context()<cr>$/;"	m
<F11>	debugger.vim	/^map <F11> :python debugger_watch_input("context_get")<cr>A<cr>$/;"	m
<F12>	debugger.vim	/^map <F12> :python debugger_property()<cr>$/;"	m
<F12>	debugger.vim	/^map <F12> :python debugger_watch_input("property_get", '<cword>')<cr>A<cr>$/;"	m
<F1>	debugger.vim	/^map <F1> :python debugger_resize()<cr>$/;"	m
<F2>	debugger.vim	/^map <F2> :python debugger_command('step_into')<cr>$/;"	m
<F3>	debugger.vim	/^map <F3> :python debugger_command('step_over')<cr>$/;"	m
<F4>	debugger.vim	/^map <F4> :python debugger_command('step_out')<cr>$/;"	m
<F5>	debugger.vim	/^map <F5> :call <SID>startDebugging()<cr>$/;"	m
<F6>	debugger.vim	/^map <F6> :call <SID>stopDebugging()<cr>$/;"	m
<SID>xx	taglist.vim	/^    map <SID>xx <SID>xx$/;"	m
Bookmark.AddBookmark	NERD_tree.vim	/^function! s:Bookmark.AddBookmark(name, path)$/;"	f
Bookmark.BookmarkExistsFor	NERD_tree.vim	/^function! s:Bookmark.BookmarkExistsFor(name)$/;"	f
Bookmark.BookmarkFor	NERD_tree.vim	/^function! s:Bookmark.BookmarkFor(name)$/;"	f
Bookmark.BookmarkNames	NERD_tree.vim	/^function! s:Bookmark.BookmarkNames()$/;"	f
Bookmark.Bookmarks	NERD_tree.vim	/^function! s:Bookmark.Bookmarks()$/;"	f
Bookmark.CacheBookmarks	NERD_tree.vim	/^function! s:Bookmark.CacheBookmarks(silent)$/;"	f
Bookmark.ClearAll	NERD_tree.vim	/^function! s:Bookmark.ClearAll()$/;"	f
Bookmark.GetNodeForName	NERD_tree.vim	/^function! s:Bookmark.GetNodeForName(name, searchFromAbsoluteRoot)$/;"	f
Bookmark.GetSelected	NERD_tree.vim	/^function! s:Bookmark.GetSelected()$/;"	f
Bookmark.InvalidBookmarks	NERD_tree.vim	/^function! s:Bookmark.InvalidBookmarks()$/;"	f
Bookmark.New	NERD_tree.vim	/^function! s:Bookmark.New(name, path)$/;"	f
Bookmark.Sort	NERD_tree.vim	/^function! s:Bookmark.Sort()$/;"	f
Bookmark.ToRoot	NERD_tree.vim	/^function! s:Bookmark.ToRoot(name)$/;"	f
Bookmark.Write	NERD_tree.vim	/^function! s:Bookmark.Write()$/;"	f
Bookmark.activate	NERD_tree.vim	/^function! s:Bookmark.activate()$/;"	f
Bookmark.compareTo	NERD_tree.vim	/^function! s:Bookmark.compareTo(otherbookmark)$/;"	f
Bookmark.delete	NERD_tree.vim	/^function! s:Bookmark.delete()$/;"	f
Bookmark.getNode	NERD_tree.vim	/^function! s:Bookmark.getNode(searchFromAbsoluteRoot)$/;"	f
Bookmark.mustExist	NERD_tree.vim	/^function! s:Bookmark.mustExist()$/;"	f
Bookmark.openInNewTab	NERD_tree.vim	/^function! s:Bookmark.openInNewTab(options)$/;"	f
Bookmark.setPath	NERD_tree.vim	/^function! s:Bookmark.setPath(path)$/;"	f
Bookmark.str	NERD_tree.vim	/^function! s:Bookmark.str()$/;"	f
Bookmark.toRoot	NERD_tree.vim	/^function! s:Bookmark.toRoot()$/;"	f
Bookmark.validate	NERD_tree.vim	/^function! s:Bookmark.validate()$/;"	f
Bp	debugger.vim	/^command! -nargs=? Bp python debugger_mark('<args>')$/;"	c
BreakPoint	debugger.py	/^class BreakPoint:$/;"	c	inherits:
CommandT	command-t.vim	/^command -nargs=? -complete=dir CommandT call <SID>CommandTShowFileFinder(<q-args>)$/;"	c
CommandTAcceptSelection	command-t.vim	/^function CommandTAcceptSelection()$/;"	f
CommandTAcceptSelectionSplit	command-t.vim	/^function CommandTAcceptSelectionSplit()$/;"	f
CommandTAcceptSelectionTab	command-t.vim	/^function CommandTAcceptSelectionTab()$/;"	f
CommandTAcceptSelectionVSplit	command-t.vim	/^function CommandTAcceptSelectionVSplit()$/;"	f
CommandTBackspace	command-t.vim	/^function CommandTBackspace()$/;"	f
CommandTBuffer	command-t.vim	/^command CommandTBuffer call <SID>CommandTShowBufferFinder()$/;"	c
CommandTCancel	command-t.vim	/^function CommandTCancel()$/;"	f
CommandTClear	command-t.vim	/^function CommandTClear()$/;"	f
CommandTCursorEnd	command-t.vim	/^function CommandTCursorEnd()$/;"	f
CommandTCursorLeft	command-t.vim	/^function CommandTCursorLeft()$/;"	f
CommandTCursorRight	command-t.vim	/^function CommandTCursorRight()$/;"	f
CommandTCursorStart	command-t.vim	/^function CommandTCursorStart()$/;"	f
CommandTDelete	command-t.vim	/^function CommandTDelete()$/;"	f
CommandTFlush	command-t.vim	/^command CommandTFlush call <SID>CommandTFlush()$/;"	c
CommandTFlush	command-t.vim	/^function s:CommandTFlush()$/;"	f
CommandTHandleKey	command-t.vim	/^function CommandTHandleKey(arg)$/;"	f
CommandTRubyWarning	command-t.vim	/^function s:CommandTRubyWarning()$/;"	f
CommandTSelectNext	command-t.vim	/^function CommandTSelectNext()$/;"	f
CommandTSelectPrev	command-t.vim	/^function CommandTSelectPrev()$/;"	f
CommandTShowBufferFinder	command-t.vim	/^function s:CommandTShowBufferFinder()$/;"	f
CommandTShowFileFinder	command-t.vim	/^function s:CommandTShowFileFinder(arg)$/;"	f
CommandTToggleFocus	command-t.vim	/^function CommandTToggleFocus()$/;"	f
ConnectionTimeoutException	debugger.py	/^class ConnectionTimeoutException(DebuggerException):$/;"	c	inherits:DebuggerException
DbgProtocol	debugger.py	/^class DbgProtocol:$/;"	c	inherits:
DebugUI	debugger.py	/^class DebugUI:$/;"	c	inherits:
Debugger	debugger.py	/^class Debugger:$/;"	c	inherits:
DebuggerException	debugger.py	/^class DebuggerException(Exception):$/;"	c	inherits:Exception
Dn	debugger.vim	/^command! -nargs=0 Dn python debugger_down()$/;"	c
HelpWindow	debugger.py	/^class HelpWindow(VimWindow):$/;"	c	inherits:VimWindow
KeyMap.All	NERD_tree.vim	/^function! s:KeyMap.All()$/;"	f
KeyMap.BindAll	NERD_tree.vim	/^function! s:KeyMap.BindAll()$/;"	f
KeyMap.Create	NERD_tree.vim	/^function! s:KeyMap.Create(options)$/;"	f
KeyMap.bind	NERD_tree.vim	/^function! s:KeyMap.bind()$/;"	f
MenuController.New	NERD_tree.vim	/^function! s:MenuController.New(menuItems)$/;"	f
MenuController._allIndexesFor	NERD_tree.vim	/^function! s:MenuController._allIndexesFor(shortcut)$/;"	f
MenuController._current	NERD_tree.vim	/^function! s:MenuController._current()$/;"	f
MenuController._cursorDown	NERD_tree.vim	/^function! s:MenuController._cursorDown()$/;"	f
MenuController._cursorUp	NERD_tree.vim	/^function! s:MenuController._cursorUp()$/;"	f
MenuController._echoPrompt	NERD_tree.vim	/^function! s:MenuController._echoPrompt()$/;"	f
MenuController._handleKeypress	NERD_tree.vim	/^function! s:MenuController._handleKeypress(key)$/;"	f
MenuController._nextIndexFor	NERD_tree.vim	/^function! s:MenuController._nextIndexFor(shortcut)$/;"	f
MenuController._restoreOptions	NERD_tree.vim	/^function! s:MenuController._restoreOptions()$/;"	f
MenuController._saveOptions	NERD_tree.vim	/^function! s:MenuController._saveOptions()$/;"	f
MenuController._setCmdheight	NERD_tree.vim	/^function! s:MenuController._setCmdheight()$/;"	f
MenuController.showMenu	NERD_tree.vim	/^function! s:MenuController.showMenu()$/;"	f
MenuItem.All	NERD_tree.vim	/^function! s:MenuItem.All()$/;"	f
MenuItem.AllEnabled	NERD_tree.vim	/^function! s:MenuItem.AllEnabled()$/;"	f
MenuItem.Create	NERD_tree.vim	/^function! s:MenuItem.Create(options)$/;"	f
MenuItem.CreateSeparator	NERD_tree.vim	/^function! s:MenuItem.CreateSeparator(options)$/;"	f
MenuItem.CreateSubmenu	NERD_tree.vim	/^function! s:MenuItem.CreateSubmenu(options)$/;"	f
MenuItem.enabled	NERD_tree.vim	/^function! s:MenuItem.enabled()$/;"	f
MenuItem.execute	NERD_tree.vim	/^function! s:MenuItem.execute()$/;"	f
MenuItem.isSeparator	NERD_tree.vim	/^function! s:MenuItem.isSeparator()$/;"	f
MenuItem.isSubmenu	NERD_tree.vim	/^function! s:MenuItem.isSubmenu()$/;"	f
NERDTree	NERD_tree.vim	/^augroup NERDTree$/;"	a
NERDTree	NERD_tree.vim	/^command! -n=? -complete=dir -bar NERDTree :call s:initNerdTree('<args>')$/;"	c
NERDTreeAddKeyMap	NERD_tree.vim	/^function! NERDTreeAddKeyMap(options)$/;"	f
NERDTreeAddMenuItem	NERD_tree.vim	/^function! NERDTreeAddMenuItem(options)$/;"	f
NERDTreeAddMenuSeparator	NERD_tree.vim	/^function! NERDTreeAddMenuSeparator(...)$/;"	f
NERDTreeAddSubmenu	NERD_tree.vim	/^function! NERDTreeAddSubmenu(options)$/;"	f
NERDTreeClose	NERD_tree.vim	/^command! -n=0 -bar NERDTreeClose :call s:closeTreeIfOpen()$/;"	c
NERDTreeFind	NERD_tree.vim	/^command! -n=0 -bar NERDTreeFind call s:findAndRevealPath()$/;"	c
NERDTreeFromBookmark	NERD_tree.vim	/^command! -n=1 -complete=customlist,s:completeBookmarks -bar NERDTreeFromBookmark call s:initNerdTree('<args>')$/;"	c
NERDTreeHijackNetrw	NERD_tree.vim	/^    augroup NERDTreeHijackNetrw$/;"	a
NERDTreeMirror	NERD_tree.vim	/^command! -n=0 -bar NERDTreeMirror call s:initNerdTreeMirror()$/;"	c
NERDTreeRender	NERD_tree.vim	/^function! NERDTreeRender()$/;"	f
NERDTreeToggle	NERD_tree.vim	/^command! -n=? -complete=dir -bar NERDTreeToggle :call s:toggle('<args>')$/;"	c
NotRunningException	debugger.py	/^class NotRunningException(DebuggerException):$/;"	c	inherits:DebuggerException
Path.AbsolutePathFor	NERD_tree.vim	/^function! s:Path.AbsolutePathFor(str)$/;"	f
Path.CopyingSupported	NERD_tree.vim	/^function! s:Path.CopyingSupported()$/;"	f
Path.Create	NERD_tree.vim	/^function! s:Path.Create(fullpath)$/;"	f
Path.JoinPathStrings	NERD_tree.vim	/^function! s:Path.JoinPathStrings(...)$/;"	f
Path.New	NERD_tree.vim	/^function! s:Path.New(path)$/;"	f
Path.Slash	NERD_tree.vim	/^function! s:Path.Slash()$/;"	f
Path.WinToUnixPath	NERD_tree.vim	/^function! s:Path.WinToUnixPath(pathstr)$/;"	f
Path._str	NERD_tree.vim	/^function! s:Path._str()$/;"	f
Path._strForCd	NERD_tree.vim	/^function! s:Path._strForCd()$/;"	f
Path._strForEdit	NERD_tree.vim	/^function! s:Path._strForEdit()$/;"	f
Path._strForGlob	NERD_tree.vim	/^function! s:Path._strForGlob()$/;"	f
Path._strForUI	NERD_tree.vim	/^function! s:Path._strForUI()$/;"	f
Path.bookmarkNames	NERD_tree.vim	/^function! s:Path.bookmarkNames()$/;"	f
Path.cacheDisplayString	NERD_tree.vim	/^function! s:Path.cacheDisplayString()$/;"	f
Path.changeToDir	NERD_tree.vim	/^function! s:Path.changeToDir()$/;"	f
Path.compareTo	NERD_tree.vim	/^function! s:Path.compareTo(path)$/;"	f
Path.copy	NERD_tree.vim	/^function! s:Path.copy(dest)$/;"	f
Path.copyingWillOverwrite	NERD_tree.vim	/^function! s:Path.copyingWillOverwrite(dest)$/;"	f
Path.delete	NERD_tree.vim	/^function! s:Path.delete()$/;"	f
Path.displayString	NERD_tree.vim	/^function! s:Path.displayString()$/;"	f
Path.equals	NERD_tree.vim	/^function! s:Path.equals(path)$/;"	f
Path.exists	NERD_tree.vim	/^function! s:Path.exists()$/;"	f
Path.extractDriveLetter	NERD_tree.vim	/^function! s:Path.extractDriveLetter(fullpath)$/;"	f
Path.getDir	NERD_tree.vim	/^function! s:Path.getDir()$/;"	f
Path.getLastPathComponent	NERD_tree.vim	/^function! s:Path.getLastPathComponent(dirSlash)$/;"	f
Path.getParent	NERD_tree.vim	/^function! s:Path.getParent()$/;"	f
Path.getSortOrderIndex	NERD_tree.vim	/^function! s:Path.getSortOrderIndex()$/;"	f
Path.ignore	NERD_tree.vim	/^function! s:Path.ignore()$/;"	f
Path.isUnder	NERD_tree.vim	/^function! s:Path.isUnder(path)$/;"	f
Path.readInfoFromDisk	NERD_tree.vim	/^function! s:Path.readInfoFromDisk(fullpath)$/;"	f
Path.refresh	NERD_tree.vim	/^function! s:Path.refresh()$/;"	f
Path.rename	NERD_tree.vim	/^function! s:Path.rename(newPath)$/;"	f
Path.str	NERD_tree.vim	/^function! s:Path.str(...)$/;"	f
Path.strTrunk	NERD_tree.vim	/^function! s:Path.strTrunk()$/;"	f
StackWindow	debugger.py	/^class StackWindow(VimWindow):$/;"	c	inherits:VimWindow
TagList_IsValid	taglist.vim	/^function! TagList_IsValid()$/;"	f
TagList_Start	taglist.vim	/^function! TagList_Start()$/;"	f
TagList_WrapUp	taglist.vim	/^function! TagList_WrapUp()$/;"	f
TagList_title	taglist.vim	/^    let TagList_title = "__Tag_List__"$/;"	v
Tlist	taglist.vim	/^    command! -nargs=0 -bar Tlist TlistToggle$/;"	c
TlistAddFiles	taglist.vim	/^    command! -nargs=+ -complete=file TlistAddFiles$/;"	c
TlistAddFilesRecursive	taglist.vim	/^    command! -nargs=+ -complete=dir TlistAddFilesRecursive$/;"	c
TlistClose	taglist.vim	/^    command! -nargs=0 -bar TlistClose call s:Tlist_Window_Close()$/;"	c
TlistDebug	taglist.vim	/^    command! -nargs=? -complete=file -bar TlistDebug$/;"	c
TlistHighlightTag	taglist.vim	/^    command! -nargs=0 -bar TlistHighlightTag call s:Tlist_Window_Highlight_Tag($/;"	c
TlistLock	taglist.vim	/^    command! -bar TlistLock let Tlist_Auto_Update=0$/;"	c
TlistMessages	taglist.vim	/^    command! -nargs=0 -bar TlistMessages call s:Tlist_Debug_Show()$/;"	c
TlistOpen	taglist.vim	/^    command! -nargs=0 -bar TlistOpen call s:Tlist_Window_Open()$/;"	c
TlistSessionLoad	taglist.vim	/^    command! -nargs=* -complete=file TlistSessionLoad$/;"	c
TlistSessionSave	taglist.vim	/^    command! -nargs=* -complete=file TlistSessionSave$/;"	c
TlistShowPrototype	taglist.vim	/^    command! -nargs=* -complete=buffer TlistShowPrototype$/;"	c
TlistShowTag	taglist.vim	/^    command! -nargs=* -complete=buffer TlistShowTag$/;"	c
TlistSync	taglist.vim	/^    command! -nargs=0 -bar TlistSync TlistHighlightTag$/;"	c
TlistToggle	taglist.vim	/^    command! -nargs=0 -bar TlistToggle call s:Tlist_Window_Toggle()$/;"	c
TlistUndebug	taglist.vim	/^    command! -nargs=0 -bar TlistUndebug  call s:Tlist_Debug_Disable()$/;"	c
TlistUnlock	taglist.vim	/^    command! -bar TlistUnlock let Tlist_Auto_Update=1$/;"	c
TlistUpdate	taglist.vim	/^    command! -nargs=0 -bar TlistUpdate call s:Tlist_Update_Current_File()$/;"	c
Tlist_Add_Files	taglist.vim	/^function! s:Tlist_Add_Files(...)$/;"	f
Tlist_Add_Files_Recursive	taglist.vim	/^function! s:Tlist_Add_Files_Recursive(dir, ...)$/;"	f
Tlist_Auto_Highlight_Tag	taglist.vim	/^        let Tlist_Auto_Highlight_Tag = 1$/;"	v
Tlist_Auto_Open	taglist.vim	/^        let Tlist_Auto_Open = 0$/;"	v
Tlist_Auto_Update	taglist.vim	/^        let Tlist_Auto_Update = 1$/;"	v
Tlist_Ballon_Expr	taglist.vim	/^function! Tlist_Ballon_Expr()$/;"	f
Tlist_Buffer_Removed	taglist.vim	/^function! s:Tlist_Buffer_Removed(filename)$/;"	f
Tlist_Change_Sort	taglist.vim	/^function! s:Tlist_Change_Sort(caller, action, sort_type)$/;"	f
Tlist_Close_On_Select	taglist.vim	/^        let Tlist_Close_On_Select = 0$/;"	v
Tlist_Compact_Format	taglist.vim	/^        let Tlist_Compact_Format = 0$/;"	v
Tlist_Ctags_Cmd	taglist.vim	/^            let Tlist_Ctags_Cmd = 'ctags'$/;"	v
Tlist_Ctags_Cmd	taglist.vim	/^            let Tlist_Ctags_Cmd = 'ctags.exe'$/;"	v
Tlist_Ctags_Cmd	taglist.vim	/^            let Tlist_Ctags_Cmd = 'exctags'$/;"	v
Tlist_Ctags_Cmd	taglist.vim	/^            let Tlist_Ctags_Cmd = 'exuberant-ctags'$/;"	v
Tlist_Ctags_Cmd	taglist.vim	/^            let Tlist_Ctags_Cmd = 'tags'$/;"	v
Tlist_Debug_Disable	taglist.vim	/^function! s:Tlist_Debug_Disable(...)$/;"	f
Tlist_Debug_Enable	taglist.vim	/^function! s:Tlist_Debug_Enable(...)$/;"	f
Tlist_Debug_Show	taglist.vim	/^function! s:Tlist_Debug_Show()$/;"	f
Tlist_Detect_Filetype	taglist.vim	/^function! s:Tlist_Detect_Filetype(fname)$/;"	f
Tlist_Discard_FileInfo	taglist.vim	/^function! s:Tlist_Discard_FileInfo(fidx)$/;"	f
Tlist_Discard_TagInfo	taglist.vim	/^function! s:Tlist_Discard_TagInfo(fidx)$/;"	f
Tlist_Display_Prototype	taglist.vim	/^        let Tlist_Display_Prototype = 0$/;"	v
Tlist_Display_Tag_Scope	taglist.vim	/^        let Tlist_Display_Tag_Scope = 1$/;"	v
Tlist_Enable_Fold_Column	taglist.vim	/^        let Tlist_Enable_Fold_Column = 1$/;"	v
Tlist_Exe_Cmd_No_Acmds	taglist.vim	/^function! s:Tlist_Exe_Cmd_No_Acmds(cmd)$/;"	f
Tlist_Exit_OnlyWindow	taglist.vim	/^        let Tlist_Exit_OnlyWindow = 0$/;"	v
Tlist_Extract_Tag_Scope	taglist.vim	/^function! s:Tlist_Extract_Tag_Scope(tag_line)$/;"	f
Tlist_Extract_Tagtype	taglist.vim	/^function! s:Tlist_Extract_Tagtype(tag_line)$/;"	f
Tlist_FileType_Init	taglist.vim	/^function! s:Tlist_FileType_Init(ftype)$/;"	f
Tlist_File_Fold_Auto_Close	taglist.vim	/^        let Tlist_File_Fold_Auto_Close = 0$/;"	v
Tlist_Find_Nearest_Tag_Idx	taglist.vim	/^function! s:Tlist_Find_Nearest_Tag_Idx(fidx, linenum)$/;"	f
Tlist_GainFocus_On_ToggleOpen	taglist.vim	/^        let Tlist_GainFocus_On_ToggleOpen = 0$/;"	v
Tlist_Get_Buffer_Filetype	taglist.vim	/^function! s:Tlist_Get_Buffer_Filetype(bnum)$/;"	f
Tlist_Get_File_Index	taglist.vim	/^function! s:Tlist_Get_File_Index(fname)$/;"	f
Tlist_Get_Tag_Linenum	taglist.vim	/^function! s:Tlist_Get_Tag_Linenum(fidx, tidx)$/;"	f
Tlist_Get_Tag_Prototype	taglist.vim	/^function! s:Tlist_Get_Tag_Prototype(fidx, tidx)$/;"	f
Tlist_Get_Tag_Prototype_By_Line	taglist.vim	/^function! Tlist_Get_Tag_Prototype_By_Line(...)$/;"	f
Tlist_Get_Tag_SearchPat	taglist.vim	/^function! s:Tlist_Get_Tag_SearchPat(fidx, tidx)$/;"	f
Tlist_Get_Tag_Type_By_Tag	taglist.vim	/^function! s:Tlist_Get_Tag_Type_By_Tag(fidx, tidx)$/;"	f
Tlist_Get_Tagname_By_Line	taglist.vim	/^function! Tlist_Get_Tagname_By_Line(...)$/;"	f
Tlist_Highlight_Tag_On_BufEnter	taglist.vim	/^        let Tlist_Highlight_Tag_On_BufEnter = 1$/;"	v
Tlist_Inc_Winwidth	taglist.vim	/^            let Tlist_Inc_Winwidth = 0$/;"	v
Tlist_Inc_Winwidth	taglist.vim	/^            let Tlist_Inc_Winwidth = 1$/;"	v
Tlist_Init_File	taglist.vim	/^function! s:Tlist_Init_File(filename, ftype)$/;"	f
Tlist_Log_Msg	taglist.vim	/^function! s:Tlist_Log_Msg(msg)$/;"	f
Tlist_Max_Submenu_Items	taglist.vim	/^        let Tlist_Max_Submenu_Items = 20$/;"	v
Tlist_Max_Tag_Length	taglist.vim	/^        let Tlist_Max_Tag_Length = 10$/;"	v
Tlist_Menu_Add_Base_Menu	taglist.vim	/^function! s:Tlist_Menu_Add_Base_Menu()$/;"	f
Tlist_Menu_File_Refresh	taglist.vim	/^function! s:Tlist_Menu_File_Refresh(fidx)$/;"	f
Tlist_Menu_Get_Tag_Type_Cmd	taglist.vim	/^function! s:Tlist_Menu_Get_Tag_Type_Cmd(fidx, ftype, add_ttype_name, ttype_idx)$/;"	f
Tlist_Menu_Init	taglist.vim	/^function! s:Tlist_Menu_Init()$/;"	f
Tlist_Menu_Jump_To_Tag	taglist.vim	/^function! s:Tlist_Menu_Jump_To_Tag(tidx)$/;"	f
Tlist_Menu_Refresh	taglist.vim	/^function! s:Tlist_Menu_Refresh()$/;"	f
Tlist_Menu_Remove_File	taglist.vim	/^function! s:Tlist_Menu_Remove_File()$/;"	f
Tlist_Menu_Update_File	taglist.vim	/^function! s:Tlist_Menu_Update_File(clear_menu)$/;"	f
Tlist_Parse_Tagline	taglist.vim	/^function! s:Tlist_Parse_Tagline(tag_line)$/;"	f
Tlist_Post_Close_Cleanup	taglist.vim	/^function! s:Tlist_Post_Close_Cleanup()$/;"	f
Tlist_Process_Dir	taglist.vim	/^function! s:Tlist_Process_Dir(dir_name, pat)$/;"	f
Tlist_Process_File	taglist.vim	/^function! s:Tlist_Process_File(filename, ftype)$/;"	f
Tlist_Process_File_Always	taglist.vim	/^        let Tlist_Process_File_Always = 0$/;"	v
Tlist_Process_Filelist	taglist.vim	/^function! s:Tlist_Process_Filelist(file_names)$/;"	f
Tlist_Refresh	taglist.vim	/^function! s:Tlist_Refresh()$/;"	f
Tlist_Refresh_Folds	taglist.vim	/^function! s:Tlist_Refresh_Folds()$/;"	f
Tlist_Remove_File	taglist.vim	/^function! s:Tlist_Remove_File(file_idx, user_request)$/;"	f
Tlist_Session_Load	taglist.vim	/^function! s:Tlist_Session_Load(...)$/;"	f
Tlist_Session_Save	taglist.vim	/^function! s:Tlist_Session_Save(...)$/;"	f
Tlist_Set_App	taglist.vim	/^function! Tlist_Set_App(name)$/;"	f
Tlist_Show_Menu	taglist.vim	/^        let Tlist_Show_Menu = 0$/;"	v
Tlist_Show_One_File	taglist.vim	/^        let Tlist_Show_One_File = 0$/;"	v
Tlist_Skip_File	taglist.vim	/^function! s:Tlist_Skip_File(filename, ftype)$/;"	f
Tlist_Sort_Type	taglist.vim	/^        let Tlist_Sort_Type = 'order'$/;"	v
Tlist_Update_Current_File	taglist.vim	/^function! s:Tlist_Update_Current_File()$/;"	f
Tlist_Update_File	taglist.vim	/^function! Tlist_Update_File(filename, ftype)$/;"	f
Tlist_Update_Remove_List	taglist.vim	/^function! s:Tlist_Update_Remove_List(filename, add)$/;"	f
Tlist_Use_Horiz_Window	taglist.vim	/^        let Tlist_Use_Horiz_Window = 0$/;"	v
Tlist_Use_Right_Window	taglist.vim	/^        let Tlist_Use_Right_Window = 0$/;"	v
Tlist_Use_SingleClick	taglist.vim	/^        let Tlist_Use_SingleClick = 0$/;"	v
Tlist_User_Removed_File	taglist.vim	/^function! s:Tlist_User_Removed_File(filename)$/;"	f
Tlist_Vim_Session_Load	taglist.vim	/^function! s:Tlist_Vim_Session_Load()$/;"	f
Tlist_Warning_Msg	taglist.vim	/^function! s:Tlist_Warning_Msg(msg)$/;"	f
Tlist_WinHeight	taglist.vim	/^        let Tlist_WinHeight = 10$/;"	v
Tlist_WinWidth	taglist.vim	/^        let Tlist_WinWidth = 30$/;"	v
Tlist_Window_Check_Auto_Open	taglist.vim	/^function! s:Tlist_Window_Check_Auto_Open()$/;"	f
Tlist_Window_Check_Width	taglist.vim	/^function! s:Tlist_Window_Check_Width()$/;"	f
Tlist_Window_Close	taglist.vim	/^function! s:Tlist_Window_Close()$/;"	f
Tlist_Window_Create	taglist.vim	/^function! s:Tlist_Window_Create()$/;"	f
Tlist_Window_Display_Help	taglist.vim	/^function! s:Tlist_Window_Display_Help()$/;"	f
Tlist_Window_Exit_Only_Window	taglist.vim	/^function! s:Tlist_Window_Exit_Only_Window()$/;"	f
Tlist_Window_Get_File_Index_By_Linenum	taglist.vim	/^function! s:Tlist_Window_Get_File_Index_By_Linenum(lnum)$/;"	f
Tlist_Window_Get_Tag_Index	taglist.vim	/^function! s:Tlist_Window_Get_Tag_Index(fidx, lnum)$/;"	f
Tlist_Window_Get_Tag_Type_By_Linenum	taglist.vim	/^function! s:Tlist_Window_Get_Tag_Type_By_Linenum(fidx, lnum)$/;"	f
Tlist_Window_Goto_Window	taglist.vim	/^function! s:Tlist_Window_Goto_Window()$/;"	f
Tlist_Window_Highlight_Line	taglist.vim	/^function! s:Tlist_Window_Highlight_Line()$/;"	f
Tlist_Window_Highlight_Tag	taglist.vim	/^function! s:Tlist_Window_Highlight_Tag(filename, cur_lnum, cntx, center)$/;"	f
Tlist_Window_Init	taglist.vim	/^function! s:Tlist_Window_Init()$/;"	f
Tlist_Window_Jump_To_Tag	taglist.vim	/^function! s:Tlist_Window_Jump_To_Tag(win_ctrl)$/;"	f
Tlist_Window_Mark_File_Window	taglist.vim	/^function! s:Tlist_Window_Mark_File_Window()$/;"	f
Tlist_Window_Move_To_File	taglist.vim	/^function! s:Tlist_Window_Move_To_File(dir)$/;"	f
Tlist_Window_Open	taglist.vim	/^function! s:Tlist_Window_Open()$/;"	f
Tlist_Window_Open_File	taglist.vim	/^function! s:Tlist_Window_Open_File(win_ctrl, filename, tagpat)$/;"	f
Tlist_Window_Open_File_Fold	taglist.vim	/^function! s:Tlist_Window_Open_File_Fold(acmd_bufnr)$/;"	f
Tlist_Window_Refresh	taglist.vim	/^function! s:Tlist_Window_Refresh()$/;"	f
Tlist_Window_Refresh_File	taglist.vim	/^function! s:Tlist_Window_Refresh_File(filename, ftype)$/;"	f
Tlist_Window_Remove_File_From_Display	taglist.vim	/^function! s:Tlist_Window_Remove_File_From_Display(fidx)$/;"	f
Tlist_Window_Show_Info	taglist.vim	/^function! s:Tlist_Window_Show_Info()$/;"	f
Tlist_Window_Toggle	taglist.vim	/^function! s:Tlist_Window_Toggle()$/;"	f
Tlist_Window_Toggle_Help_Text	taglist.vim	/^function! s:Tlist_Window_Toggle_Help_Text()$/;"	f
Tlist_Window_Update_File	taglist.vim	/^function! s:Tlist_Window_Update_File()$/;"	f
Tlist_Window_Update_Line_Offsets	taglist.vim	/^function! s:Tlist_Window_Update_Line_Offsets(start_idx, increment, offset)$/;"	f
Tlist_Window_Zoom	taglist.vim	/^function! s:Tlist_Window_Zoom()$/;"	f
TraceWindow	debugger.py	/^class TraceWindow(VimWindow):$/;"	c	inherits:VimWindow
TreeDirNode.AbsoluteTreeRoot	NERD_tree.vim	/^function! s:TreeDirNode.AbsoluteTreeRoot()$/;"	f
TreeDirNode.GetSelected	NERD_tree.vim	/^function! s:TreeDirNode.GetSelected()$/;"	f
TreeDirNode.New	NERD_tree.vim	/^function! s:TreeDirNode.New(path)$/;"	f
TreeDirNode._initChildren	NERD_tree.vim	/^function! s:TreeDirNode._initChildren(silent)$/;"	f
TreeDirNode._openRecursively2	NERD_tree.vim	/^function! s:TreeDirNode._openRecursively2(forceOpen)$/;"	f
TreeDirNode.activate	NERD_tree.vim	/^function! s:TreeDirNode.activate(forceKeepWinOpen)$/;"	f
TreeDirNode.addChild	NERD_tree.vim	/^function! s:TreeDirNode.addChild(treenode, inOrder)$/;"	f
TreeDirNode.close	NERD_tree.vim	/^function! s:TreeDirNode.close()$/;"	f
TreeDirNode.closeChildren	NERD_tree.vim	/^function! s:TreeDirNode.closeChildren()$/;"	f
TreeDirNode.createChild	NERD_tree.vim	/^function! s:TreeDirNode.createChild(path, inOrder)$/;"	f
TreeDirNode.findNode	NERD_tree.vim	/^function! s:TreeDirNode.findNode(path)$/;"	f
TreeDirNode.getChild	NERD_tree.vim	/^function! s:TreeDirNode.getChild(path)$/;"	f
TreeDirNode.getChildByIndex	NERD_tree.vim	/^function! s:TreeDirNode.getChildByIndex(indx, visible)$/;"	f
TreeDirNode.getChildCount	NERD_tree.vim	/^function! s:TreeDirNode.getChildCount()$/;"	f
TreeDirNode.getChildIndex	NERD_tree.vim	/^function! s:TreeDirNode.getChildIndex(path)$/;"	f
TreeDirNode.getVisibleChildCount	NERD_tree.vim	/^function! s:TreeDirNode.getVisibleChildCount()$/;"	f
TreeDirNode.getVisibleChildren	NERD_tree.vim	/^function! s:TreeDirNode.getVisibleChildren()$/;"	f
TreeDirNode.hasVisibleChildren	NERD_tree.vim	/^function! s:TreeDirNode.hasVisibleChildren()$/;"	f
TreeDirNode.open	NERD_tree.vim	/^function! s:TreeDirNode.open()$/;"	f
TreeDirNode.openExplorer	NERD_tree.vim	/^function! s:TreeDirNode.openExplorer()$/;"	f
TreeDirNode.openInNewTab	NERD_tree.vim	/^function! s:TreeDirNode.openInNewTab(options)$/;"	f
TreeDirNode.openRecursively	NERD_tree.vim	/^function! s:TreeDirNode.openRecursively()$/;"	f
TreeDirNode.refresh	NERD_tree.vim	/^function! s:TreeDirNode.refresh()$/;"	f
TreeDirNode.removeChild	NERD_tree.vim	/^function! s:TreeDirNode.removeChild(treenode)$/;"	f
TreeDirNode.reveal	NERD_tree.vim	/^function! s:TreeDirNode.reveal(path)$/;"	f
TreeDirNode.sortChildren	NERD_tree.vim	/^function! s:TreeDirNode.sortChildren()$/;"	f
TreeDirNode.toggleOpen	NERD_tree.vim	/^function! s:TreeDirNode.toggleOpen()$/;"	f
TreeDirNode.transplantChild	NERD_tree.vim	/^function! s:TreeDirNode.transplantChild(newNode)$/;"	f
TreeFileNode.GetRootForTab	NERD_tree.vim	/^function! s:TreeFileNode.GetRootForTab()$/;"	f
TreeFileNode.GetRootLineNum	NERD_tree.vim	/^function! s:TreeFileNode.GetRootLineNum()$/;"	f
TreeFileNode.GetSelected	NERD_tree.vim	/^function! s:TreeFileNode.GetSelected()$/;"	f
TreeFileNode.New	NERD_tree.vim	/^function! s:TreeFileNode.New(path)$/;"	f
TreeFileNode._renderToString	NERD_tree.vim	/^function! s:TreeFileNode._renderToString(depth, drawText, vertMap, isLastChild)$/;"	f
TreeFileNode.activate	NERD_tree.vim	/^function! s:TreeFileNode.activate(forceKeepWinOpen)$/;"	f
TreeFileNode.bookmark	NERD_tree.vim	/^function! s:TreeFileNode.bookmark(name)$/;"	f
TreeFileNode.cacheParent	NERD_tree.vim	/^function! s:TreeFileNode.cacheParent()$/;"	f
TreeFileNode.clearBoomarks	NERD_tree.vim	/^function! s:TreeFileNode.clearBoomarks()$/;"	f
TreeFileNode.copy	NERD_tree.vim	/^function! s:TreeFileNode.copy(dest)$/;"	f
TreeFileNode.delete	NERD_tree.vim	/^function! s:TreeFileNode.delete()$/;"	f
TreeFileNode.displayString	NERD_tree.vim	/^function! s:TreeFileNode.displayString()$/;"	f
TreeFileNode.equals	NERD_tree.vim	/^function! s:TreeFileNode.equals(treenode)$/;"	f
TreeFileNode.findNode	NERD_tree.vim	/^function! s:TreeFileNode.findNode(path)$/;"	f
TreeFileNode.findOpenDirSiblingWithVisibleChildren	NERD_tree.vim	/^function! s:TreeFileNode.findOpenDirSiblingWithVisibleChildren(direction)$/;"	f
TreeFileNode.findSibling	NERD_tree.vim	/^function! s:TreeFileNode.findSibling(direction)$/;"	f
TreeFileNode.getLineNum	NERD_tree.vim	/^function! s:TreeFileNode.getLineNum()$/;"	f
TreeFileNode.isRoot	NERD_tree.vim	/^function! s:TreeFileNode.isRoot()$/;"	f
TreeFileNode.isVisible	NERD_tree.vim	/^function! s:TreeFileNode.isVisible()$/;"	f
TreeFileNode.makeRoot	NERD_tree.vim	/^function! s:TreeFileNode.makeRoot()$/;"	f
TreeFileNode.open	NERD_tree.vim	/^function! s:TreeFileNode.open()$/;"	f
TreeFileNode.openInNewTab	NERD_tree.vim	/^function! s:TreeFileNode.openInNewTab(options)$/;"	f
TreeFileNode.openSplit	NERD_tree.vim	/^function! s:TreeFileNode.openSplit()$/;"	f
TreeFileNode.openVSplit	NERD_tree.vim	/^function! s:TreeFileNode.openVSplit()$/;"	f
TreeFileNode.putCursorHere	NERD_tree.vim	/^function! s:TreeFileNode.putCursorHere(isJump, recurseUpward)$/;"	f
TreeFileNode.refresh	NERD_tree.vim	/^function! s:TreeFileNode.refresh()$/;"	f
TreeFileNode.rename	NERD_tree.vim	/^function! s:TreeFileNode.rename(newName)$/;"	f
TreeFileNode.renderToString	NERD_tree.vim	/^function! s:TreeFileNode.renderToString()$/;"	f
Up	debugger.vim	/^command! -nargs=0 Up python debugger_up()$/;"	c
VimWindow	debugger.py	/^class VimWindow:$/;"	c	inherits:
WatchWindow	debugger.py	/^class WatchWindow(VimWindow):$/;"	c	inherits:VimWindow
__init__	debugger.py	/^  def __init__(self):$/;"	m	class:BreakPoint	access:public
__init__	debugger.py	/^  def __init__(self, debugger, dedicatedtab, minibufexpl = 0):$/;"	m	class:DebugUI	access:public
__init__	debugger.py	/^  def __init__(self, owner, name = 'DEBUG_WINDOW'):$/;"	m	class:VimWindow	access:public
__init__	debugger.py	/^  def __init__(self, owner, name = 'HELP__WINDOW'):$/;"	m	class:HelpWindow	access:public
__init__	debugger.py	/^  def __init__(self, owner, name = 'STACK_WINDOW'):$/;"	m	class:StackWindow	access:public
__init__	debugger.py	/^  def __init__(self, owner, name = 'TRACE_WINDOW'):$/;"	m	class:TraceWindow	access:public
__init__	debugger.py	/^  def __init__(self, owner, name = 'WATCH_WINDOW'):$/;"	m	class:WatchWindow	access:public
__init__	debugger.py	/^  def __init__(self, port = 9000):$/;"	m	class:DbgProtocol	access:public
__init__	debugger.py	/^  def __init__(self, port = 9000, max_children = '32', max_data = '1024', max_depth = '1', timeout = 5, dedicatedtab = 1, minibufexpl = '0', debug = 0):$/;"	m	class:Debugger	access:public
_xml_stringfy	debugger.py	/^  def _xml_stringfy(self, node, level = 0, encoding = None):$/;"	m	class:VimWindow	access:public
accept	debugger.py	/^  def accept(self):$/;"	m	class:DbgProtocol	access:public
activateNode	NERD_tree.vim	/^function! s:activateNode(forceKeepWindowOpen)$/;"	f
add	debugger.py	/^  def add(self, file, line, exp = ''):$/;"	m	class:BreakPoint	access:public
bindMappings	NERD_tree.vim	/^function! s:bindMappings()$/;"	f
bookmarkNode	NERD_tree.vim	/^function! s:bookmarkNode(name)$/;"	f
bufInWindows	NERD_tree.vim	/^function! s:bufInWindows(bnum)$/;"	f
centerView	NERD_tree.vim	/^function! s:centerView()$/;"	f
chCwd	NERD_tree.vim	/^function! s:chCwd()$/;"	f
chRoot	NERD_tree.vim	/^function! s:chRoot()$/;"	f
checkForActivate	NERD_tree.vim	/^function! s:checkForActivate()$/;"	f
checkForBrowse	NERD_tree.vim	/^function! s:checkForBrowse(dir)$/;"	f
clean	debugger.py	/^  def clean(self):$/;"	m	class:VimWindow	access:public
clear	debugger.py	/^  def clear(self):$/;"	m	class:BreakPoint	access:public
clear	debugger.py	/^  def clear(self):$/;"	m	class:Debugger	access:public
clearBookmarks	NERD_tree.vim	/^function! s:clearBookmarks(bookmarks)$/;"	f
close	debugger.py	/^  def close(self):$/;"	m	class:DbgProtocol	access:public
closeChildren	NERD_tree.vim	/^function! s:closeChildren()$/;"	f
closeCurrentDir	NERD_tree.vim	/^function! s:closeCurrentDir()$/;"	f
closeTree	NERD_tree.vim	/^function! s:closeTree()$/;"	f
closeTreeIfOpen	NERD_tree.vim	/^function! s:closeTreeIfOpen()$/;"	f
closeTreeIfQuitOnOpen	NERD_tree.vim	/^function! s:closeTreeIfQuitOnOpen()$/;"	f
closeTreeWindow	NERD_tree.vim	/^function! s:closeTreeWindow()$/;"	f
command	debugger.py	/^  def command(self, cmd):$/;"	m	class:VimWindow	access:public
command	debugger.py	/^  def command(self, cmd, arg1 = '', arg2 = ''):$/;"	m	class:Debugger	access:public
compareBookmarks	NERD_tree.vim	/^function! s:compareBookmarks(first, second)$/;"	f
compareNodes	NERD_tree.vim	/^function! s:compareNodes(n1, n2)$/;"	f
completeBookmarks	NERD_tree.vim	/^function! s:completeBookmarks(A,L,P)$/;"	f
create	debugger.py	/^  def create(self):$/;"	m	class:DebugUI	access:public
create	debugger.py	/^  def create(self, method = 'new'):$/;"	m	class:VimWindow	access:public
createTreeWin	NERD_tree.vim	/^function! s:createTreeWin()$/;"	f
debug_mode	debugger.py	/^  def debug_mode(self):$/;"	m	class:DebugUI	access:public
debugger_command	debugger.py	/^def debugger_command(msg, arg1 = '', arg2 = ''):$/;"	f	access:public
debugger_context	debugger.py	/^def debugger_context():$/;"	f	access:public
debugger_down	debugger.py	/^def debugger_down():$/;"	f	access:public
debugger_init	debugger.py	/^def debugger_init():$/;"	f	access:public
debugger_mark	debugger.py	/^def debugger_mark(exp = ''):$/;"	f	access:public
debugger_property	debugger.py	/^def debugger_property(name = ''):$/;"	f	access:public
debugger_quit	debugger.py	/^def debugger_quit():$/;"	f	access:public
debugger_resize	debugger.py	/^def debugger_resize():$/;"	f	access:public
debugger_run	debugger.py	/^def debugger_run():$/;"	f	access:public
debugger_up	debugger.py	/^def debugger_up():$/;"	f	access:public
debugger_watch_input	debugger.py	/^def debugger_watch_input(cmd, arg = ''):$/;"	f	access:public
deleteBookmark	NERD_tree.vim	/^function! s:deleteBookmark()$/;"	f
destroy	debugger.py	/^  def destroy(self):$/;"	m	class:DebugUI	access:public
destroy	debugger.py	/^  def destroy(self):$/;"	m	class:VimWindow	access:public
displayHelp	NERD_tree.vim	/^function! s:displayHelp()$/;"	f
down	debugger.py	/^  def down(self):$/;"	m	class:Debugger	access:public
dumpHelp	NERD_tree.vim	/^function! s:dumpHelp()$/;"	f
echo	NERD_tree.vim	/^function! s:echo(msg)$/;"	f
echoError	NERD_tree.vim	/^function! s:echoError(msg)$/;"	f
echoWarning	NERD_tree.vim	/^function! s:echoWarning(msg)$/;"	f
exec	NERD_tree.vim	/^function! s:exec(cmd)$/;"	f
find	debugger.py	/^  def find(self, file, line):$/;"	m	class:BreakPoint	access:public
findAndRevealPath	NERD_tree.vim	/^function! s:findAndRevealPath()$/;"	f
firstUsableWindow	NERD_tree.vim	/^function! s:firstUsableWindow()$/;"	f
fixup_childs	debugger.py	/^  def fixup_childs(self, line, node, level):$/;"	m	class:VimWindow	access:public
fixup_childs	debugger.py	/^  def fixup_childs(self, line, node, level):$/;"	m	class:WatchWindow	access:public
fixup_single	debugger.py	/^  def fixup_single(self, line, node, level):$/;"	m	class:VimWindow	access:public
fixup_single	debugger.py	/^  def fixup_single(self, line, node, level):$/;"	m	class:WatchWindow	access:public
g:NERDTreeBookmark	NERD_tree.vim	/^let g:NERDTreeBookmark = s:Bookmark$/;"	v
g:NERDTreeDirNode	NERD_tree.vim	/^let g:NERDTreeDirNode = s:TreeDirNode$/;"	v
g:NERDTreeFileNode	NERD_tree.vim	/^let g:NERDTreeFileNode = s:TreeFileNode$/;"	v
g:NERDTreeIgnore	NERD_tree.vim	/^    let g:NERDTreeIgnore = ['\\~$']$/;"	v
g:NERDTreePath	NERD_tree.vim	/^let g:NERDTreePath = s:Path$/;"	v
g:NERDTreeSortOrder	NERD_tree.vim	/^    let g:NERDTreeSortOrder = ['\\\/$', '*', '\\.swp$',  '\\.bak$', '\\~$']$/;"	v
g:NERDTreeStatusline	NERD_tree.vim	/^    let g:NERDTreeStatusline = "%{exists('b:NERDTreeRoot')?b:NERDTreeRoot.path.str():''}"$/;"	v
g:command_t_loaded	command-t.vim	/^let g:command_t_loaded = 1$/;"	v
g:debuggerDebugMode	debugger.vim	/^    let g:debuggerDebugMode = 0$/;"	v
g:debuggerDedicatedTab	debugger.vim	/^    let g:debuggerDedicatedTab = 1$/;"	v
g:debuggerMaxChildren	debugger.vim	/^  let g:debuggerMaxChildren = 32$/;"	v
g:debuggerMaxData	debugger.vim	/^  let g:debuggerMaxData = 1024$/;"	v
g:debuggerMaxDepth	debugger.vim	/^  let g:debuggerMaxDepth = 1$/;"	v
g:debuggerMiniBufExpl	debugger.vim	/^  let g:debuggerMiniBufExpl = 0$/;"	v
g:debuggerPort	debugger.vim	/^  let g:debuggerPort = 9000$/;"	v
g:debuggerTimeout	debugger.vim	/^    let g:debuggerTimeout = 10$/;"	v
getPath	NERD_tree.vim	/^function! s:getPath(ln)$/;"	f
getTreeWinNum	NERD_tree.vim	/^function! s:getTreeWinNum()$/;"	f
get_command	debugger.py	/^  def get_command(self):$/;"	m	class:WatchWindow	access:public
getexp	debugger.py	/^  def getexp(self, bno):$/;"	m	class:BreakPoint	access:public
getfile	debugger.py	/^  def getfile(self, bno):$/;"	m	class:BreakPoint	access:public
getid	debugger.py	/^  def getid(self, bno):$/;"	m	class:BreakPoint	access:public
getline	debugger.py	/^  def getline(self, bno):$/;"	m	class:BreakPoint	access:public
getwinnr	debugger.py	/^  def getwinnr(self):$/;"	m	class:VimWindow	access:public
go_srcview	debugger.py	/^  def go_srcview(self):$/;"	m	class:DebugUI	access:public
handleMiddleMouse	NERD_tree.vim	/^function! s:handleMiddleMouse()$/;"	f
handle_init	debugger.py	/^  def handle_init(self, res):$/;"	m	class:Debugger	access:public
handle_msg	debugger.py	/^  def handle_msg(self, res):$/;"	m	class:Debugger	access:public
handle_response	debugger.py	/^  def handle_response(self, res):$/;"	m	class:Debugger	access:public
handle_response_breakpoint_set	debugger.py	/^  def handle_response_breakpoint_set(self, res):$/;"	m	class:Debugger	access:public
handle_response_context_get	debugger.py	/^  def handle_response_context_get(self, res):$/;"	m	class:Debugger	access:public
handle_response_default	debugger.py	/^  def handle_response_default(self, res):$/;"	m	class:Debugger	access:public
handle_response_error	debugger.py	/^  def handle_response_error(self, res):$/;"	m	class:Debugger	access:public
handle_response_eval	debugger.py	/^  def handle_response_eval(self, res):$/;"	m	class:Debugger	access:public
handle_response_feature_set	debugger.py	/^  def handle_response_feature_set(self, res):$/;"	m	class:Debugger	access:public
handle_response_property_get	debugger.py	/^  def handle_response_property_get(self, res):$/;"	m	class:Debugger	access:public
handle_response_run	debugger.py	/^  def handle_response_run(self, res):$/;"	m	class:Debugger	access:public
handle_response_stack_get	debugger.py	/^  def handle_response_stack_get(self, res):$/;"	m	class:Debugger	access:public
handle_response_step_into	debugger.py	/^  def handle_response_step_into(self, res):$/;"	m	class:Debugger	access:public
handle_response_step_out	debugger.py	/^  def handle_response_step_out(self, res):$/;"	m	class:Debugger	access:public
handle_response_step_over	debugger.py	/^  def handle_response_step_over(self, res):$/;"	m	class:Debugger	access:public
highlight_stack	debugger.py	/^  def highlight_stack(self, no):$/;"	m	class:StackWindow	access:public
indentLevelFor	NERD_tree.vim	/^function! s:indentLevelFor(line)$/;"	f
initNerdTree	NERD_tree.vim	/^function! s:initNerdTree(name)$/;"	f
initNerdTreeInPlace	NERD_tree.vim	/^function! s:initNerdTreeInPlace(dir)$/;"	f
initNerdTreeMirror	NERD_tree.vim	/^function! s:initNerdTreeMirror()$/;"	f
initVariable	NERD_tree.vim	/^function! s:initVariable(var, value)$/;"	f
input	debugger.py	/^  def input(self, mode, arg = ''):$/;"	m	class:WatchWindow	access:public
isTreeOpen	NERD_tree.vim	/^function! s:isTreeOpen()$/;"	f
isWindowUsable	NERD_tree.vim	/^function! s:isWindowUsable(winnumber)$/;"	f
isconnected	debugger.py	/^  def isconnected(self):$/;"	m	class:DbgProtocol	access:public
isprepared	debugger.py	/^  def isprepared(self):$/;"	m	class:VimWindow	access:public
jumpToChild	NERD_tree.vim	/^function! s:jumpToChild(direction)$/;"	f
jumpToFirstChild	NERD_tree.vim	/^function! s:jumpToFirstChild()$/;"	f
jumpToLastChild	NERD_tree.vim	/^function! s:jumpToLastChild()$/;"	f
jumpToParent	NERD_tree.vim	/^function! s:jumpToParent()$/;"	f
jumpToRoot	NERD_tree.vim	/^function! s:jumpToRoot()$/;"	f
jumpToSibling	NERD_tree.vim	/^function! s:jumpToSibling(forward)$/;"	f
list	debugger.py	/^  def list(self):$/;"	m	class:BreakPoint	access:public
loaded_nerd_tree	NERD_tree.vim	/^let loaded_nerd_tree = 1$/;"	v
loaded_taglist	taglist.vim	/^            let loaded_taglist = 'no'$/;"	v
loaded_taglist	taglist.vim	/^        let loaded_taglist = 'no'$/;"	v
loaded_taglist	taglist.vim	/^    let loaded_taglist = 'fast_load_done'$/;"	v
loaded_taglist	taglist.vim	/^let loaded_taglist = 'available'$/;"	v
mark	debugger.py	/^  def mark(self, exp = ''):$/;"	m	class:Debugger	access:public
nextBufferName	NERD_tree.vim	/^function! s:nextBufferName()$/;"	f
next_sign	debugger.py	/^  def next_sign(self):$/;"	m	class:DebugUI	access:public
normal_mode	debugger.py	/^  def normal_mode(self):$/;"	m	class:DebugUI	access:public
on_create	debugger.py	/^  def on_create(self):$/;"	m	class:HelpWindow	access:public
on_create	debugger.py	/^  def on_create(self):$/;"	m	class:StackWindow	access:public
on_create	debugger.py	/^  def on_create(self):$/;"	m	class:TraceWindow	access:public
on_create	debugger.py	/^  def on_create(self):$/;"	m	class:VimWindow	access:public
on_create	debugger.py	/^  def on_create(self):$/;"	m	class:WatchWindow	access:public
openBookmark	NERD_tree.vim	/^function! s:openBookmark(name)$/;"	f
openEntrySplit	NERD_tree.vim	/^function! s:openEntrySplit(vertical, forceKeepWindowOpen)$/;"	f
openExplorer	NERD_tree.vim	/^function! s:openExplorer()$/;"	f
openInNewTab	NERD_tree.vim	/^function! s:openInNewTab(stayCurrentTab)$/;"	f
openNodeRecursively	NERD_tree.vim	/^function! s:openNodeRecursively()$/;"	f
prepare	debugger.py	/^  def prepare(self):$/;"	m	class:VimWindow	access:public
previewNode	NERD_tree.vim	/^function! s:previewNode(openNewWin)$/;"	f
promptToDelBuffer	NERD_tree.vim	/^function! s:promptToDelBuffer(bufnum, msg)$/;"	f
property_get	debugger.py	/^  def property_get(self, name = ''):$/;"	m	class:Debugger	access:public
putCursorInTreeWin	NERD_tree.vim	/^function! s:putCursorInTreeWin()$/;"	f
putCursorOnBookmarkTable	NERD_tree.vim	/^function! s:putCursorOnBookmarkTable()$/;"	f
quit	debugger.py	/^  def quit(self):$/;"	m	class:Debugger	access:public
recv	debugger.py	/^  def recv(self, count=10000):$/;"	m	class:Debugger	access:public
recv_body	debugger.py	/^  def recv_body(self, to_recv):$/;"	m	class:DbgProtocol	access:public
recv_length	debugger.py	/^  def recv_length(self):$/;"	m	class:DbgProtocol	access:public
recv_msg	debugger.py	/^  def recv_msg(self):$/;"	m	class:DbgProtocol	access:public
recv_null	debugger.py	/^  def recv_null(self):$/;"	m	class:DbgProtocol	access:public
refreshCurrent	NERD_tree.vim	/^function! s:refreshCurrent()$/;"	f
refreshRoot	NERD_tree.vim	/^function! s:refreshRoot()$/;"	f
remove	debugger.py	/^  def remove(self, bno):$/;"	m	class:BreakPoint	access:public
renderBookmarks	NERD_tree.vim	/^function! s:renderBookmarks()$/;"	f
renderView	NERD_tree.vim	/^function! s:renderView()$/;"	f
renderViewSavingPosition	NERD_tree.vim	/^function! s:renderViewSavingPosition()$/;"	f
restoreScreenState	NERD_tree.vim	/^function! s:restoreScreenState()$/;"	f
restore_session	debugger.py	/^  def restore_session(self):$/;"	m	class:DebugUI	access:public
revealBookmark	NERD_tree.vim	/^function! s:revealBookmark(name)$/;"	f
run	debugger.py	/^  def run(self):$/;"	m	class:Debugger	access:public
s:Bookmark	NERD_tree.vim	/^let s:Bookmark = {}$/;"	v
s:KeyMap	NERD_tree.vim	/^let s:KeyMap = {}$/;"	v
s:MenuController	NERD_tree.vim	/^let s:MenuController = {}$/;"	v
s:MenuItem	NERD_tree.vim	/^let s:MenuItem = {}$/;"	v
s:NERDTreeBufName	NERD_tree.vim	/^let s:NERDTreeBufName = 'NERD_tree_'$/;"	v
s:NERDTreeSortStarIndex	NERD_tree.vim	/^let s:NERDTreeSortStarIndex = index(g:NERDTreeSortOrder, '*')$/;"	v
s:NERD_tree_version	NERD_tree.vim	/^let s:NERD_tree_version = '4.1.0'$/;"	v
s:Path	NERD_tree.vim	/^let s:Path = {}$/;"	v
s:Tlist_Skip_Refresh	taglist.vim	/^let s:Tlist_Skip_Refresh = 0$/;"	v
s:TreeDirNode	NERD_tree.vim	/^let s:TreeDirNode = copy(s:TreeFileNode)$/;"	v
s:TreeFileNode	NERD_tree.vim	/^let s:TreeFileNode = {}$/;"	v
s:cpo_save	taglist.vim	/^let s:cpo_save = &cpo$/;"	v
s:escape_chars	NERD_tree.vim	/^    let s:escape_chars =  " \\\\`\\|\\"#%&,?()\\*^<>"$/;"	v
s:escape_chars	NERD_tree.vim	/^    let s:escape_chars =  " `\\|\\"#%&,?()\\*^<>"$/;"	v
s:menu_char_prefix	taglist.vim	/^let s:menu_char_prefix =$/;"	v
s:next_buffer_number	NERD_tree.vim	/^let s:next_buffer_number = 1$/;"	v
s:old_cpo	NERD_tree.vim	/^let s:old_cpo = &cpo$/;"	v
s:running_windows	NERD_tree.vim	/^let s:running_windows = has("win16") || has("win32") || has("win64")$/;"	v
s:tlist_app_name	taglist.vim	/^let s:tlist_app_name = "none"$/;"	v
s:tlist_brief_help	taglist.vim	/^let s:tlist_brief_help = 1$/;"	v
s:tlist_cur_file_idx	taglist.vim	/^let s:tlist_cur_file_idx = -1$/;"	v
s:tlist_debug	taglist.vim	/^let s:tlist_debug = 0$/;"	v
s:tlist_debug_file	taglist.vim	/^let s:tlist_debug_file = ''$/;"	v
s:tlist_def_asm_settings	taglist.vim	/^let s:tlist_def_asm_settings = 'asm;d:define;l:label;m:macro;t:type'$/;"	v
s:tlist_def_aspperl_settings	taglist.vim	/^let s:tlist_def_aspperl_settings = 'asp;f:function;s:sub;v:variable'$/;"	v
s:tlist_def_aspvbs_settings	taglist.vim	/^let s:tlist_def_aspvbs_settings = 'asp;f:function;s:sub;v:variable'$/;"	v
s:tlist_def_awk_settings	taglist.vim	/^let s:tlist_def_awk_settings = 'awk;f:function'$/;"	v
s:tlist_def_beta_settings	taglist.vim	/^let s:tlist_def_beta_settings = 'beta;f:fragment;s:slot;v:pattern'$/;"	v
s:tlist_def_c_settings	taglist.vim	/^let s:tlist_def_c_settings = 'c;d:macro;g:enum;s:struct;u:union;t:typedef;' .$/;"	v
s:tlist_def_cobol_settings	taglist.vim	/^let s:tlist_def_cobol_settings = 'cobol;d:data;f:file;g:group;p:paragraph;' .$/;"	v
s:tlist_def_cpp_settings	taglist.vim	/^let s:tlist_def_cpp_settings = 'c++;n:namespace;v:variable;d:macro;t:typedef;' .$/;"	v
s:tlist_def_cs_settings	taglist.vim	/^let s:tlist_def_cs_settings = 'c#;d:macro;t:typedef;n:namespace;c:class;' .$/;"	v
s:tlist_def_csh_settings	taglist.vim	/^let s:tlist_def_csh_settings = 'sh;f:function'$/;"	v
s:tlist_def_eiffel_settings	taglist.vim	/^let s:tlist_def_eiffel_settings = 'eiffel;c:class;f:feature'$/;"	v
s:tlist_def_erlang_settings	taglist.vim	/^let s:tlist_def_erlang_settings = 'erlang;d:macro;r:record;m:module;f:function'$/;"	v
s:tlist_def_expect_settings	taglist.vim	/^let s:tlist_def_expect_settings = 'tcl;c:class;f:method;p:procedure'$/;"	v
s:tlist_def_fortran_settings	taglist.vim	/^let s:tlist_def_fortran_settings = 'fortran;p:program;b:block data;' .$/;"	v
s:tlist_def_html_settings	taglist.vim	/^let s:tlist_def_html_settings = 'html;a:anchor;f:javascript function'$/;"	v
s:tlist_def_java_settings	taglist.vim	/^let s:tlist_def_java_settings = 'java;p:package;c:class;i:interface;' .$/;"	v
s:tlist_def_javascript_settings	taglist.vim	/^let s:tlist_def_javascript_settings = 'javascript;f:function'$/;"	v
s:tlist_def_lisp_settings	taglist.vim	/^let s:tlist_def_lisp_settings = 'lisp;f:function'$/;"	v
s:tlist_def_lua_settings	taglist.vim	/^let s:tlist_def_lua_settings = 'lua;f:function'$/;"	v
s:tlist_def_make_settings	taglist.vim	/^let s:tlist_def_make_settings = 'make;m:macro'$/;"	v
s:tlist_def_pascal_settings	taglist.vim	/^let s:tlist_def_pascal_settings = 'pascal;f:function;p:procedure'$/;"	v
s:tlist_def_perl_settings	taglist.vim	/^let s:tlist_def_perl_settings = 'perl;c:constant;l:label;p:package;s:subroutine'$/;"	v
s:tlist_def_php_settings	taglist.vim	/^let s:tlist_def_php_settings = 'php;c:class;d:constant;v:variable;f:function'$/;"	v
s:tlist_def_python_settings	taglist.vim	/^let s:tlist_def_python_settings = 'python;c:class;m:member;f:function'$/;"	v
s:tlist_def_rexx_settings	taglist.vim	/^let s:tlist_def_rexx_settings = 'rexx;s:subroutine'$/;"	v
s:tlist_def_ruby_settings	taglist.vim	/^let s:tlist_def_ruby_settings = 'ruby;c:class;f:method;F:function;' .$/;"	v
s:tlist_def_scheme_settings	taglist.vim	/^let s:tlist_def_scheme_settings = 'scheme;s:set;f:function'$/;"	v
s:tlist_def_sh_settings	taglist.vim	/^let s:tlist_def_sh_settings = 'sh;f:function'$/;"	v
s:tlist_def_slang_settings	taglist.vim	/^let s:tlist_def_slang_settings = 'slang;n:namespace;f:function'$/;"	v
s:tlist_def_sml_settings	taglist.vim	/^let s:tlist_def_sml_settings = 'sml;e:exception;c:functor;s:signature;' .$/;"	v
s:tlist_def_sql_settings	taglist.vim	/^let s:tlist_def_sql_settings = 'sql;c:cursor;F:field;P:package;r:record;' .$/;"	v
s:tlist_def_tcl_settings	taglist.vim	/^let s:tlist_def_tcl_settings = 'tcl;c:class;f:method;m:method;p:procedure'$/;"	v
s:tlist_def_vera_settings	taglist.vim	/^let s:tlist_def_vera_settings = 'vera;c:class;d:macro;e:enumerator;' .$/;"	v
s:tlist_def_verilog_settings	taglist.vim	/^let s:tlist_def_verilog_settings = 'verilog;m:module;c:constant;P:parameter;' .$/;"	v
s:tlist_def_vim_settings	taglist.vim	/^let s:tlist_def_vim_settings = 'vim;a:autocmds;v:variable;f:function'$/;"	v
s:tlist_def_yacc_settings	taglist.vim	/^let s:tlist_def_yacc_settings = 'yacc;l:label'$/;"	v
s:tlist_def_zsh_settings	taglist.vim	/^let s:tlist_def_zsh_settings = 'sh;f:function'$/;"	v
s:tlist_file_count	taglist.vim	/^let s:tlist_file_count = 0$/;"	v
s:tlist_file_lnum_idx_cache	taglist.vim	/^let s:tlist_file_lnum_idx_cache = -1$/;"	v
s:tlist_file_name_idx_cache	taglist.vim	/^let s:tlist_file_name_idx_cache = -1$/;"	v
s:tlist_file_names	taglist.vim	/^let s:tlist_file_names=''$/;"	v
s:tlist_ftype_count	taglist.vim	/^let s:tlist_ftype_count = 0$/;"	v
s:tlist_menu_empty	taglist.vim	/^let s:tlist_menu_empty = 1$/;"	v
s:tlist_msg	taglist.vim	/^    let s:tlist_msg = ''$/;"	v
s:tlist_removed_flist	taglist.vim	/^let s:tlist_removed_flist = ""$/;"	v
s:tlist_sid	taglist.vim	/^    let s:tlist_sid = substitute(maparg('<SID>xx'), '<SNR>\\(\\d\\+_\\)xx$',$/;"	v
s:tlist_win_maximized	taglist.vim	/^let s:tlist_win_maximized = 0$/;"	v
s:tlist_winsize_chgd	taglist.vim	/^let s:tlist_winsize_chgd = -1$/;"	v
s:tree_markup_reg	NERD_tree.vim	/^let s:tree_markup_reg = '^[ `|]*[\\-+~]'$/;"	v
s:tree_up_dir_line	NERD_tree.vim	/^let s:tree_up_dir_line = '.. (up a dir)'$/;"	v
s:tree_wid	NERD_tree.vim	/^let s:tree_wid = 2$/;"	v
saveScreenState	NERD_tree.vim	/^function! s:saveScreenState()$/;"	f
send	debugger.py	/^  def send(self, msg):$/;"	m	class:Debugger	access:public
send_command	debugger.py	/^  def send_command(self, cmd, arg1 = '', arg2 = ''):$/;"	m	class:Debugger	access:public
send_msg	debugger.py	/^  def send_msg(self, cmd):$/;"	m	class:DbgProtocol	access:public
set_highlight	debugger.py	/^  def set_highlight(self):$/;"	m	class:DebugUI	access:public
set_srcview	debugger.py	/^  def set_srcview(self, file, line):$/;"	m	class:DebugUI	access:public
setid	debugger.py	/^  def setid(self, bno, id):$/;"	m	class:BreakPoint	access:public
setupStatusline	NERD_tree.vim	/^function! s:setupStatusline()$/;"	f
setupSyntaxHighlighting	NERD_tree.vim	/^function! s:setupSyntaxHighlighting()$/;"	f
showMenu	NERD_tree.vim	/^function! s:showMenu()$/;"	f
startDebugging	debugger.vim	/^function! s:startDebugging()$/;"	f
stop	debugger.py	/^  def stop(self):$/;"	m	class:Debugger	access:public
stopDebugging	debugger.vim	/^function! s:stopDebugging()$/;"	f
store_session	debugger.py	/^  def store_session(self):$/;"	m	class:DebugUI	access:public
stripMarkupFromLine	NERD_tree.vim	/^function! s:stripMarkupFromLine(line, removeLeadingSpaces)$/;"	f
switch_working_tab	debugger.py	/^  def switch_working_tab(self):$/;"	m	class:DebugUI	access:public
tabpagevar	NERD_tree.vim	/^function! s:tabpagevar(tabnr, var)$/;"	f
toggle	NERD_tree.vim	/^function! s:toggle(dir)$/;"	f
toggleIgnoreFilter	NERD_tree.vim	/^function! s:toggleIgnoreFilter()$/;"	f
toggleShowBookmarks	NERD_tree.vim	/^function! s:toggleShowBookmarks()$/;"	f
toggleShowFiles	NERD_tree.vim	/^function! s:toggleShowFiles()$/;"	f
toggleShowHidden	NERD_tree.vim	/^function! s:toggleShowHidden()$/;"	f
toggleZoom	NERD_tree.vim	/^function! s:toggleZoom()$/;"	f
trace	debugger.py	/^  def trace(self, msg, xml = 0):$/;"	m	class:DebugUI	access:public
treeExistsForBuf	NERD_tree.vim	/^function! s:treeExistsForBuf()$/;"	f
treeExistsForTab	NERD_tree.vim	/^function! s:treeExistsForTab()$/;"	f
unique	NERD_tree.vim	/^function! s:unique(list)$/;"	f
unknown_exception_handler	debugger.py	/^def unknown_exception_handler(msg = 'Unknown Exception, Connection closed, stop debugging\\n'):$/;"	f	access:public
up	debugger.py	/^  def up(self):$/;"	m	class:Debugger	access:public
upDir	NERD_tree.vim	/^function! s:upDir(keepState)$/;"	f
watch_execute	debugger.py	/^  def watch_execute(self):$/;"	m	class:Debugger	access:public
watch_input	debugger.py	/^  def watch_input(self, mode, arg = ''):$/;"	m	class:Debugger	access:public
write	debugger.py	/^  def write(self, msg):$/;"	m	class:VimWindow	access:public
write_xml	debugger.py	/^  def write_xml(self, xml):$/;"	m	class:VimWindow	access:public
write_xml_childs	debugger.py	/^  def write_xml_childs(self, xml):$/;"	m	class:VimWindow	access:public
xml_on_attribute	debugger.py	/^  def xml_on_attribute(self, node):$/;"	m	class:VimWindow	access:public
xml_on_cdata_section	debugger.py	/^  def xml_on_cdata_section(self, node):$/;"	m	class:VimWindow	access:public
xml_on_cdata_section	debugger.py	/^  def xml_on_cdata_section(self, node):$/;"	m	class:WatchWindow	access:public
xml_on_comment	debugger.py	/^  def xml_on_comment(self, node):$/;"	m	class:VimWindow	access:public
xml_on_document	debugger.py	/^  def xml_on_document(self, node):$/;"	m	class:VimWindow	access:public
xml_on_document_type	debugger.py	/^  def xml_on_document_type(self, node):$/;"	m	class:VimWindow	access:public
xml_on_element	debugger.py	/^  def xml_on_element(self, node):$/;"	m	class:StackWindow	access:public
xml_on_element	debugger.py	/^  def xml_on_element(self, node):$/;"	m	class:TraceWindow	access:public
xml_on_element	debugger.py	/^  def xml_on_element(self, node):$/;"	m	class:VimWindow	access:public
xml_on_element	debugger.py	/^  def xml_on_element(self, node):$/;"	m	class:WatchWindow	access:public
xml_on_entity	debugger.py	/^  def xml_on_entity(self, node):$/;"	m	class:VimWindow	access:public
xml_on_notation	debugger.py	/^  def xml_on_notation(self, node):$/;"	m	class:VimWindow	access:public
xml_on_processing_instruction	debugger.py	/^  def xml_on_processing_instruction(self, node):$/;"	m	class:VimWindow	access:public
xml_on_text	debugger.py	/^  def xml_on_text(self, node):$/;"	m	class:VimWindow	access:public
xml_on_text	debugger.py	/^  def xml_on_text(self, node):$/;"	m	class:WatchWindow	access:public
xml_stringfy	debugger.py	/^  def xml_stringfy(self, xml):$/;"	m	class:VimWindow	access:public
xml_stringfy_childs	debugger.py	/^  def xml_stringfy_childs(self, node, level = 0):$/;"	m	class:VimWindow	access:public
